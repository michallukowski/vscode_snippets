{
  // Place your snippets for cmake here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "init project executable": {
    "prefix": "init project executable",
    "body": [
      "cmake_minimum_required(VERSION 3.11.0)\n",
      "project(${1:name} VERSION 0.1.0)\n",
      "set(SOURCES",
      "  \"src/main.cpp\"",
      ")\n",
      "set(MY_LIBRARIES \"\")\n",
      "option(USE_TESTS \"Enable building of unit tests\" OFF)",
      "option(USE_CCACHE \"Use ccache to speed up recompilation\" ON)",
      "option(USE_SANITIZER \"Use sanitizer address to detect memory leak at runtime\" ON)\n",
      "if(USE_CCACHE)",
      "  find_program(CCACHE_FOUND ccache)",
      "  if(CCACHE_FOUND)",
      "    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \\${CCACHE_FOUND})",
      "    message(\"Ccache will be used to speed up recompilation.\")",
      "  else()",
      "    message(ERROR \"Ccache cannot be found. Please install ccache to speed up recompilation.\")",
      "  endif()",
      "endif()\n",
      "add_executable(\\${PROJECT_NAME} WIN32)\n",
      "set_target_properties(",
      "  \\${PROJECT_NAME} PROPERTIES",
      "  CXX_STANDARD 20",
      "  CXX_STANDARD_REQUIRED ON",
      "  CXX_EXTENSIONS NO",
      "  DEBUG_POSTFIX \"_d\"",
      ")\n",
      "target_sources(\\${PROJECT_NAME} PRIVATE",
      "  \\${SOURCES}",
      ")\n",
      "target_include_directories(\\${PROJECT_NAME} PUBLIC \"include/\")\n",
      "find_package(fmt)\n",
      "#Libraries",
      "foreach(LIBRARY \\${MY_LIBRARIES})",
      "  add_subdirectory(\"libs/\\${LIBRARY}\")",
      "endforeach(LIBRARY )\n",
      "target_link_libraries(\\${PROJECT_NAME} PRIVATE fmt::fmt \\${MY_LIBRARIES})\n",
      "if (USE_SANITIZER AND CMAKE_BUILD_TYPE STREQUAL \"Debug\")",
      "  message(\"Sanitize Address will be used to detect memory leak at runtime.\")",
      "  target_compile_options(\\${PROJECT_NAME} PRIVATE -fsanitize=address)",
      "  target_link_options(\\${PROJECT_NAME} PRIVATE -fsanitize=address)",
      "endif (USE_SANITIZER AND CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n",
      "if(USE_TESTS)",
      "#Tests in subdirectory test",
      "  enable_testing()",
      "  add_subdirectory(test)",
      "endif(USE_TESTS)\n"
    ],
    "description": "init project executable"
  },
  "init project library": {
    "prefix": "init project library",
    "body": [
      "cmake_minimum_required(VERSION 3.11.0)\n",
      "set(LIBRARY_NAME ${1:name})\n",
      "project(\\${LIBRARY_NAME} VERSION 0.1.0)\n",
      "if(PROJECT_IS_TOP_LEVEL)",
      "  option(USE_TESTS \"Enable building of unit tests\" ON)",
      "endif()\n",
      "add_library(\\${LIBRARY_NAME} STATIC)\n",
      "set_target_properties(",
      "  \\${LIBRARY_NAME} PROPERTIES",
      "  CXX_STANDARD 20",
      "  CXX_STANDARD_REQUIRED ON",
      "  CXX_EXTENSIONS NO",
      "  DEBUG_POSTFIX \"_d\"",
      ")\n",
      "target_sources(\\${LIBRARY_NAME} PRIVATE",
      "  \"src/${1:name}.cpp\"",
      ")\n",
      "target_include_directories(\\${LIBRARY_NAME} PRIVATE",
      "  \\$<BUILD_INTERFACE:\\${CMAKE_CURRENT_SOURCE_DIR}/include/\\${LIBRARY_NAME}>",
      "  \\$<INSTALL_INTERFACE:include/\\${LIBRARY_NAME}>",
      ")\n",
      "target_include_directories(\\${LIBRARY_NAME} PUBLIC",
      "  \\$<BUILD_INTERFACE:\\${CMAKE_CURRENT_SOURCE_DIR}/include/>",
      "  \\$<INSTALL_INTERFACE:include/>",
      ")\n",
      "if(USE_TESTS)",
      "#Tests in subdirectory test",
      "  enable_testing()",
      "  add_subdirectory(test)",
      "endif(USE_TESTS)\n"
    ],
    "description": "init project library"
  },
  "ccache": {
    "prefix": "ccache",
    "body": [
      "find_program(CCACHE_PROGRAM ccache)",
      "if(CCACHE_PROGRAM)",
      "  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"\\${CCACHE_PROGRAM}\")",
      "endif()\n"
    ],
    "description": "ccache template"
  },
  "init tests catch2": {
    "prefix": "init tests catch2",
    "body": [
      "",
      "#--------------------Tests--------------------\n",
      "set(TEST_NAME \"test_${1:tested_library_name}\")",
      "find_package(Catch2 REQUIRED)\n",
      "add_executable(\\${TEST_NAME} \"\")",
      "target_link_libraries(\\${TEST_NAME} Catch2::Catch2WithMain ${1:tested_library_name})\n",
      "target_sources(\\${TEST_NAME} PRIVATE",
      "  \"${1:tested_library_name}_test.cpp\"",
      "  #other test files",
      ")\n",
      "target_include_directories(\\${TEST_NAME} PUBLIC \"../include/\")\n",
      "set_target_properties(\\${TEST_NAME} PROPERTIES",
      "  CXX_STANDARD 20",
      "  CXX_STANDARD_REQUIRED ON",
      "  CXX_EXTENSIONS NO",
      ")\n",
      "set_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1)",
      "include(CTest)",
      "enable_testing()",
      "include(Catch)",
      "catch_discover_tests(\\${TEST_NAME})\n",
      "#------------------End Tests------------------\n"
    ],
    "description": "init tests catch2"
  },
  "wxWidgets": {
    "prefix": "wxWidgets",
    "body": [
      "",
      "#------------------wxWidgets------------------\n",
      "option(USE_GTK3_GUI \"Use GTK3 GUI toolkit\" OFF)\n",
      "if(UNIX OR USE_GTK3_GUI)",
      "  message(\"GTK3 GUI toolkit will be used.\")",
      "  set(wxWidgets_CONFIG_OPTIONS --toolkit=gtk3)",
      "endif()\n",
      "if(UNIX OR MSYS)",
      "  message(\"UNIX style!\")",
      "  set(wxWidgets_FIND_STYLE \"unix\")",
      "endif()\n",
      "if(MSYS)",
      "  set(WIN_RESOURCE \"res/resource.rc\") # add application icon to this file",
      "endif(MSYS)\n",
      "find_package(wxWidgets REQUIRED)\n",
      "if(!wxWidgets_FOUND)",
      "  error(\"Could not find WxWidgets\")",
      "endif(wxWidgets_FOUND)\n",
      "include(\"\\${wxWidgets_USE_FILE}\")\n",
      "if(CMAKE_BUILD_TYPE MATCHES \"Debug\")",
      "  set(wxWidgets_USE_DEBUG ON)",
      "endif(CMAKE_BUILD_TYPE MATCHES \"Debug\")\n",
      "target_link_libraries(",
      "  \\${PROJECT_NAME}",
      "  \\${wxWidgets_LIBRARIES}",
      ")\n",
      "#----------------End wxWidgets----------------\n"
    ],
    "description": "wxWidgets template"
  },
  "install section": {
    "prefix": "install section",
    "body": [
      "",
      "#-----------------Installation-----------------\n",
      "set(CMAKE_INSTALL_PREFIX \\${CMAKE_SOURCE_DIR}/install/\\${PROJECT_NAME}_\\${CMAKE_PROJECT_VERSION})\n",
      "if(MSYS)",
      "  set(INSTALL_BIN_DIR \".\")",
      "  set(INSTALL_SHARE_DIR \".\")",
      "  set(INSTALL_LIB_DIR \".\")\n",
      "  #Make sure you specified environment variable MSYS2_INSTALL_PATH where msys2 is installed e.g. C:/msys64",
      "  if(NOT DEFINED ENV{MSYS2_INSTALL_PATH})",
      "    message(WARNING \"Not specified \\\"cmake.environment\\\" variable \\\"MSYS2_INSTALL_PATH\\\" where msys2 is installed e.g. C:/msys64\")",
      "  else()",
      "    set(MSYS2_BIN_DIR \"\\$ENV{MSYS2_INSTALL_PATH}/usr/bin/\")",
      "    find_path(MINGW_PATH bin/cmake.exe)",
      "    set(MINGW_BIN_DIR \"\\${MINGW_PATH}/bin\")\n",
      "    execute_process(",
      "      COMMAND \\${MSYS2_BIN_DIR}bash -c \"ldd \\${PROJECT_NAME}.exe | grep -v -ie '/./Windows/' | grep -o -P '^[^ =>]+'\" ,",
      "      WORKING_DIRECTORY \\${CMAKE_BINARY_DIR}",
      "      OUTPUT_VARIABLE MINGW_DEPENDENCIES",
      "    )\n",
      "    if(NOT \\${MINGW_DEPENDENCIES} STREQUAL \"\")",
      "      string(REPLACE \"\\t\" \"\" MINGW_DEPENDENCIES \\${MINGW_DEPENDENCIES})",
      "      string(REPLACE \"\\n\" \";\" MINGW_DEPENDENCIES \\${MINGW_DEPENDENCIES})\n",
      "      foreach(LIB IN LISTS MINGW_DEPENDENCIES)",
      "        file(GLOB LIBS \"\\${MINGW_BIN_DIR}/\\${LIB}\")",
      "        list(APPEND MINGW_FILES \\${LIBS})",
      "      endforeach()\n",
      "      install(FILES \\${MINGW_FILES} DESTINATION \\${INSTALL_BIN_DIR})",
      "    endif()",
      "  endif()\n",
      "elseif(UNIX)",
      "  set(INSTALL_BIN_DIR \"bin\")",
      "  set(INSTALL_SHARE_DIR \"share/\\${PROJECT_NAME}\")",
      "  set(INSTALL_LIB_DIR \"lib/\\${PROJECT_NAME}\")",
      "endif()\n",
      "install(FILES",
      "  \"\\${CMAKE_SOURCE_DIR}/README.md\"",
      "  \"\\${CMAKE_SOURCE_DIR}/CHANGELOG.md\"",
      "  DESTINATION \"\\${INSTALL_BIN_DIR}/\"",
      ")\n",
      "install(DIRECTORY ",
      "  \"\\${CMAKE_SOURCE_DIR}/files\"",
      "  DESTINATION \"\\${INSTALL_BIN_DIR}/\"",
      ")\n",
      "install(TARGETS \\${PROJECT_NAME}",
      "  BUNDLE DESTINATION \\${INSTALL_BIN_DIR}",
      "  RUNTIME DESTINATION \\${INSTALL_BIN_DIR}",
      ")\n",
      "include(InstallRequiredSystemLibraries)",
      "# set(CPACK_RESOURCE_FILE_LICENSE \"\\${CMAKE_CURRENT_SOURCE_DIR}/License.txt\")",
      "set(CPACK_PACKAGE_VERSION_MAJOR \"\\${Tutorial_VERSION_MAJOR}\")",
      "set(CPACK_PACKAGE_VERSION_MINOR \"\\${Tutorial_VERSION_MINOR}\")",
      "set(CPACK_GENERATOR \"ZIP\")",
      "include(CPack)\n",
      "#---------------End Installation---------------\n"
    ],
    "description": "install section template"
  }
}
