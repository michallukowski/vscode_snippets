{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:name}",
      "{",
      "public: ",
      "    ${1:name}();",
      "    $0",
      "private:",
      "};"
    ],
    "description": "class"
  },
  "class derived": {
    "prefix": "class",
    "body": [
      "class ${1:name} : public ${2:derived from}",
      "{",
      "public:",
      "    ${1:name}() {}",
      "    $0",
      "private:",
      "};"
    ],
    "description": "class derived"
  },
  "cout": {
    "prefix": "cout",
    "body": ["std::cout << "],
    "description": "cout"
  },
  "disable copy constructor": {
    "prefix": "disable copy constructor",
    "body": [
      "${1:class name}(const ${1:class name} &) = delete;",
      "${1:class name} &operator=(const ${1:class name} &) = delete;"
    ],
    "description": "disable copy constructor"
  },
  "disable copy and move constructor": {
    "prefix": "disable copy and move constructor",
    "body": [
      "${1:class name}(const ${1:class name} &) = delete;",
      "${1:class name}(${1:class name} &&) = delete;",
      "${1:class name} &operator=(const ${1:class name} &) = delete;",
      "${1:class name} &operator=(${1:class name} &&) = delete;"
    ],
    "description": "disable copy and move constructor"
  },
  "do": {
    "prefix": "do",
    "body": ["do ", "{", "    $0", "} while (${1:condition});"],
    "description": "do"
  },
  "else": {
    "prefix": "else",
    "body": ["else ", "{", "    $0", "}"],
    "description": "else"
  },
  "else if": {
    "prefix": "else if",
    "body": ["else if (${1:condition}) ", "{", "    $0", "}"],
    "description": "else if"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for (int ${1:i} = 0; ${1:i} < ${2:total}; ++${1:i})",
      "{",
      "    $0",
      "}"
    ],
    "description": "for"
  },
  "for range-based": {
    "prefix": "forrange",
    "body": [
      "for (${1:const} auto& ${2:element} : ${3:container}) ",
      "{",
      "    $0",
      "}"
    ],
    "description": "for range-based"
  },
  "get set declaration": {
    "prefix": "getset",
    "body": [
      "${1:type} Get${2:name}();",
      "void Set${2:name}(${1:type} value);"
    ],
    "description": "get set declaration"
  },
  "include <header>": {
    "prefix": "include <header>",
    "body": ["#include <$0>"],
    "description": "include <header>"
  },
  "include \"header\"": {
    "prefix": "include \"header\"",
    "body": ["#include \"$0\""],
    "description": "include \"header\""
  },
  "include guard": {
    "prefix": "guard",
    "body": [
      "#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H",
      "",
      "$0",
      "",
      "#endif // ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H"
    ],
    "description": "include guard"
  },
  "if": {
    "prefix": "if",
    "body": ["if (${1:condition}) ", "{", "    $0", "}"],
    "description": "if"
  },
  "if else": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) ",
      "{",
      "    $0",
      "} ",
      "else ",
      "{",
      "",
      "}"
    ],
    "description": "if else"
  },
  "interface": {
    "prefix": "interface",
    "body": [
      "class I${1:name}",
      "{",
      "public:",
      "    virtual ~I${1:name}() {}",
      "    virtual ${2:type} ${3:method_name}() = 0; ",
      "};"
    ],
    "description": "interface"
  },
  "literal": {
    "prefix": "literal",
    "body": ["using namespace std::literals"],
    "description": "using namespace std::literals;"
  },
  "main": {
    "prefix": "main",
    "body": [
      "int main(int argc, char *argv[])",
      "{",
      "    $0",
      "    return 0;",
      "}"
    ],
    "description": "main"
  },
  "namespace": {
    "prefix": "namespace",
    "body": ["namespace ${1:name} {", "    $0", "}"],
    "description": "namespace"
  },
  "namespace with closing brace comment": {
    "prefix": "namespace",
    "body": ["namespace ${1:name} {", "    $0", "} //namespace ${1:name}"],
    "description": "namespace with closing brace comment"
  },
  "pragma once": {
    "prefix": "pragma",
    "body": ["#pragma once", "", "$0"],
    "description": "pragma once"
  },
  "std::array": {
    "prefix": "array",
    "body": ["std::array<${1:type}, ${2:size}> $0"],
    "description": "std::array"
  },
  "std::string": {
    "prefix": "string",
    "body": ["std::string $0"],
    "description": "std::string"
  },
  "std::vector": {
    "prefix": "vector",
    "body": ["std::vector<${1:type}> $0"],
    "description": "std::vector"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1:name}", "{", "    $0", "};"],
    "description": "struct"
  },
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:control}) ",
      "{",
      "case ${2:value}:",
      "    $0",
      "    break;",
      "default:",
      "    break;",
      "}"
    ],
    "description": "switch"
  },
  "template class": {
    "prefix": "template",
    "body": [
      "template <typename ${1:T}>",
      "class ${2:name}",
      "{",
      "public:",
      "    ${2:name}() {}",
      "};"
    ],
    "description": "template class"
  },
  "try and catch": {
    "prefix": "try",
    "body": [
      "try ",
      "{",
      "    $0",
      "} ",
      "catch (${1:const std::exception& ex}) ",
      "{",
      "    ",
      "}"
    ],
    "description": "try and catch"
  },
  "using namespace": {
    "prefix": "using",
    "body": ["using namespace ${1:name};"],
    "description": "using namespace"
  },
  "while": {
    "prefix": "while",
    "body": ["while (${1:condition}) ", "{", "    $0", "}"],
    "description": "while"
  },
  "test": {
    "prefix": "test catch2",
    "body": [
      "// Catch2WithMain\n",
      "#include <catch2/catch_test_macros.hpp>\n",
      "TEST_CASE(\"${1:Test name}\", \"[${2:test tag}]\") {",
      "  $0\n",
      "  REQUIRE();\n",
      "}\n"
    ],
    "description": "test catch2"
  },
  "wxmain": {
    "prefix": "wxmain",
    "body": [
      "#include <wx/wx.h>\n",
      "class MyApp : public wxApp {",
      "public:",
      "  bool OnInit() override;",
      "};\n",
      "wxIMPLEMENT_APP(MyApp);\n",
      "class MyFrame : public wxFrame {",
      "public:",
      "  MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size);",
      "};\n",
      "bool MyApp::OnInit() {",
      "  MyFrame* frame = new MyFrame(\"Hello World\", wxDefaultPosition, wxDefaultSize);\n",
      "  frame->Show();\n",
      "  return true;",
      "};\n",
      "MyFrame::MyFrame(const wxString& title, const wxPoint& pos, const wxSize& size)",
      "  : wxFrame(nullptr, wxID_ANY, title, pos, size) {",
      "  $0",
      "};\n"
    ],
    "description": "wxmain"
  }
}
