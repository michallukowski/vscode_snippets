{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  
  "useState": {
    "scope": "javascript, typescript, typescriptreact",
    "prefix": "useState",
    "body": [
      "const [${1:name}, set$2${1:name}] = React.useState($0);",
    ],
    "description": "useState"
  },
  "useEffect": {
    "scope": "javascript, typescript, typescriptreact",
    "prefix": "useEffect",
    "body": [
      "React.useEffect(() => {",
      "  $1",
      "}, [$2]);"
    ],
    "description": "useEffect"
  },
  "useCallback": {
    "scope": "javascript, typescript, typescriptreact",
    "prefix": "useCallback",
    "body": [
      "const ${1:handle} = React.useCallback(($2) => {",
      "  $3",
      "}, [$4]);"
    ],
    "description": "useCallback"
  },
  "useMemo": {
    "scope": "javascript, typescript, typescriptreact",
    "prefix": "useMemo",
    "body": [
      "const ${1:variable} = React.useMemo(($2) => {",
      "  $3",
      "}, [$4]);"
    ],
    "description": "useMemo"
  },
}